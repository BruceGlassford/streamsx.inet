namespace com.ibm.streamsx.inet.sample;
use com.ibm.streamsx.inet.http::httpGet;
use com.ibm.streamsx.inet.rest::HTTPJSONInjection;
composite PutGetPost {
graph
stream<rstring result> GetStream = Custom() {

logic onProcess: {

mutable int32 error = 0;
rstring result1 = httpGet("http://weather.noaa.gov/pub/data/observations/metar/cycles/00Z.TXT",
    (list<rstring>)[],"","",error);
if (error == 0) {
    submit({result=result1},GetStream);
}
else {
    appTrc(Trace.error,"Error code was "+(rstring)error);
}
}

}

() as checkGet = Custom(GetStream) {
 
 logic state: {
    mutable int32 numTuples = 0;
 }
 
 onTuple GetStream:
    {
        if (result != "") {
            numTuples++;
        }

    }
    onPunct GetStream:
    {
        if (currentPunct() == Sys.FinalMarker) {
            if (numTuples != 1) {
                abort();
            }
        }
    }
}

() as sentTuples = Custom() {
logic onProcess: {
    mutable int32 error =0;
    mutable int32 i = 0;
    while (i < 5) {
    rstring toPost = "str=This is tuple%20"+(rstring)i+"&iter="+(rstring)i;
    appTrc(Trace.error,"To post: "+toPost);
    rstring result1 = httpPost(toPost,"http://127.0.0.1:8080/InjectedTuples/ports/output/0/inject",["ContentType: application/x-www-form-urlencoded"],"","",error);
    if (error != 0) {
        appTrc(Trace.error,"Error code on post was "+(rstring)error);
    }
    i++;
    }
    } // end onProcess
}// end custom

stream<rstring str, int32 iter> Received = com.ibm.streamsx.inet.rest::HTTPTupleInjection() {

param 
port: 8080;

}

}
