namespace com.ibm.streamsx.inet.http.tests;

composite HTTPStreamBasicFunctionTestMain {
	param
		expression<rstring> $baseUrl : getSubmissionTimeValue("baseUrl");
	type
		HTTPStreamType = rstring httpString;
		
		                                                                                      
	graph
		
		stream<HTTPStreamType> HTTPStream
			= com.ibm.streamsx.inet.http::HTTPGetStream() {
			param
				url : $baseUrl + "/streamtest/streamtest?dataCount=10"; 
		}
		stream<uint32 val> CheckStream = Beacon() {
			param
				iterations : 1;
				initDelay : 5.0;
			output CheckStream : val =0u;
		}	
		
		() as SinkOp = Custom(HTTPStream; CheckStream) {
			logic 
				state : {mutable uint32 dataCount = 0u, punctCount =0u;}
				onTuple HTTPStream : {
					println(HTTPStream.httpString);
					dataCount++;
				}
				onPunct HTTPStream : {
					println(currentPunct());
					punctCount++;
				}
				onTuple CheckStream : {
					assert(dataCount == 10u, "TEST_ERROR: Data Count check failed. Found: " + (rstring)dataCount + ", Expected: 10");
					assert(punctCount == 2u, "TEST_ERROR: Punctuation Count check failed. Found: " + (rstring)punctCount + ", Expected: 2");
					println("Counts verified");
				}
		}

}

composite HTTPStreamBadUrlTestMain {
	param
		expression<rstring> $baseUrl : "http://somebogusurl.com" ;
		
	type
		HTTPStreamType = rstring httpString;
		
		                                                                                      
	graph
		
		(stream<HTTPStreamType> HTTPStream;
		stream<com.ibm.streamsx.inet.http::HTTPResponse> HTTPResponseStream)
			= com.ibm.streamsx.inet.http::HTTPGetStream() {
			param
				url : $baseUrl + "/streamtest/streamtest?dataCount=10"; 
				maxRetries : 3;
				retryDelay : 1.0;
		}
		stream<uint32 val> CheckStream = Beacon() {
			param
				iterations : 1;
				initDelay : 10.0;
			output CheckStream : val =0u;
		}	
		
		() as SinkOp = Custom(HTTPStream; HTTPResponseStream; CheckStream) {
			logic 
				state : {mutable uint32 dataCount = 0u, errCount =0u;}
				onTuple HTTPStream : {
					dataCount++;
				}
				onTuple HTTPResponseStream : {
					errCount++;
				}
				onTuple CheckStream : {
					assert(dataCount == 0u, "TEST_ERROR: Data Count check failed. Found: " + (rstring)dataCount + ", Expected: 0");
					assert(errCount == 4u, "TEST_ERROR: Error Count check failed. Found: " + (rstring)errCount + ", Expected: 4");
					println("Counts verified");
				}
		}

}

